namespace SKHands
{
    // NOT Implemented yet, just pasting the code and the data here. These poses are for the static
    // hand models that's shown when controllers are used.
    public class ControllerHands {

        //Input.HandVisible(Handed.Left, false);
        //Input.HandVisible(Handed.Right, false);

        //currentPose = input_pose_neutral;

        //float[,,] currentPose;

        //Hand _handRightPos = Input.Hand(Handed.Right);
        //Hand _handLeftPos = Input.Hand(Handed.Left);

        //float[,,] input_pose_neutral = new float[5, 3, 3]{
        //           {   //{0.006338987f, 0.01847209f, 0.04890552f},
        //{0.006338987f, 0.01847209f, 0.04890552f},
        //               {0.01950568f, 0.04451702f, 0.01871854f},
        ////{0.03121975f, 0.05856872f, -0.003319894f},
        //{0.03858139f, 0.06398648f, -0.0153669f}
        //           },
        //           {   //{-0.01233831f, 0.01116261f, 0.04216255f},
        //{-0.002714128f, 0.02194321f, -0.02117033f},
        //               {0.003980417f, 0.02554905f, -0.05600143f},
        ////{0.01675123f, 0.02680694f, -0.0712335f},
        //{0.02675417f, 0.02690793f, -0.07531749f}
        //           },
        //           {
        ////{-0.01347275f, 0.0006831143f, 0.03915538f},
        //{-0.004351828f, 0.002496252f, -0.02174273f},
        //               {0.003322304f, 0.002755495f, -0.06058559f},
        ////{0.01375171f, 0.002959597f, -0.08134879f},
        //{0.02377497f, 0.003075514f, -0.08751987f}
        //           },
        //           {
        ////{-0.01110613f, -0.009853964f, 0.03748593f},
        //{-0.002922643f, -0.01656897f, -0.01680171f},
        //               {0.001875293f, -0.02284598f, -0.05353047f},
        ////{0.01345768f, -0.02496933f, -0.07355195f},
        //{0.02266935f, -0.0250958f, -0.08128503f}
        //           },
        //           {
        ////{-0.004220022f, -0.02008814f, 0.03971447f},
        //{0.001175472f, -0.03336885f, -0.009437861f},
        //               {0.005197856f, -0.04395664f, -0.036894f},
        ////{0.01361939f, -0.04731729f, -0.05050619f},
        //{0.02230755f, -0.04770203f, -0.05737948f}
        //           },
        //       };

        //float[,,] input_pose_point = new float[5, 3, 3]{
        //           {	//{0.006131408f,0.01815838f,0.04505195f},
        //{0.006131408f,0.01815838f,0.04505195f},
        //               {0.01270308f,0.04482257f,0.01702162f},
        ////{0.01630832f,0.06481414f,-0.0009846101f},
        //{0.01759359f,0.07634115f,-0.009560416f}
        //           },
        //           { 
        ////{-0.01160152f,0.0108169f,0.04065126f},
        //{-0.00222376f,0.02121915f,-0.0202237f},
        //               {0.004039682f,0.02013896f,-0.05349388f},
        ////{0.007857157f,0.01958693f,-0.07227257f},
        //{0.01060621f,0.01955366f,-0.08235464f},
        //           },
        //           { 
        ////{-0.01294504f,0.0008582036f,0.0376371f},
        //{-0.004054221f,0.002636103f,-0.02090236f},
        //               {0.03300411f,0.00867769f,-0.02209898f},
        ////{0.03741793f,0.008943442f,-0.0003977363f},
        //{0.03210304f,0.007879252f,0.009498565f},
        //           },
        //           { 
        ////{-0.01086021f,-0.009254843f,0.03626087f},
        //{-0.00288212f,-0.01568122f,-0.01592853f},
        //               {0.03135449f,-0.008710498f,-0.01676258f},
        ////{0.03618271f,-0.004347002f,0.003811417f},
        //{0.03075671f,-0.003873582f,0.0135968f},
        //           },
        //           { 
        ////{-0.003921936f,-0.01905536f,0.03830199f},
        //{0.001366374f,-0.03179852f,-0.008958421f},
        //               {0.02734447f,-0.02348606f,-0.01257059f},
        ////{0.031354f,-0.01761196f,0.0008747724f},
        //{0.02717f,-0.0160759f,0.01017799f},
        //           },
        //       };

        //float[,,] input_pose_pinch = new float[5, 3, 3]{
        //           {	//{0.006954093f,0.01839733f,0.04546071f},
        //{0.006954093f,0.01839733f,0.04546071f},
        //               {0.0281439f,0.02728055f,0.0135546f},
        ////{0.04397159f,0.02895658f,-0.008541596f},
        //{0.0528623f,0.02540583f,-0.01938091f},
        //           },
        //           { 
        ////{-0.01133f,0.01086031f,0.04083612f},
        //{-0.00206051f,0.02124113f,-0.02005905f},
        //               {0.0255676f,0.02592271f,-0.03879721f},
        ////{0.0431445f,0.02383362f,-0.03151209f},
        //{0.04969539f,0.02166998f,-0.0236005f},
        //           },
        //           { 
        ////{-0.01319246f,0.0007495628f,0.03746448f},
        //{-0.004399951f,0.002506733f,-0.02109046f},
        //               {0.0108264f,0.008809681f,-0.05519799f},
        ////{0.02848257f,0.01293498f,-0.06819078f},
        //{0.03916272f,0.01487589f,-0.07143266f},
        //           },
        //           { 
        ////{-0.01064428f,-0.009368405f,0.03597109f},
        //{-0.002748185f,-0.01581321f,-0.01622851f},
        //               {0.005274567f,-0.01565067f,-0.05089361f},
        ////{0.01698176f,-0.0136768f,-0.06958803f},
        //{0.02523951f,-0.01199047f,-0.07739244f},
        //           },
        //           { 
        ////{-0.003794328f,-0.01916116f,0.03806538f},
        //{0.001424642f,-0.03192238f,-0.009197861f},
        //               {0.006307265f,-0.03706312f,-0.03650517f},
        ////{0.01301978f,-0.03756608f,-0.05076451f},
        //{0.01932488f,-0.03667746f,-0.05923889f},
        //           },
        //       };

        //float[,,] input_pose_fist = new float[5, 3, 3]{
        //           {	//{0.005665252f,0.01743333f,0.05084944f},
        //{0.005665252f,0.01743333f,0.05084944f},
        //               {0.02554873f,0.02709787f,0.0137122f},
        ////{0.04050829f,0.01504829f,-0.00840535f},
        //{0.04574133f,0.001379195f,-0.0132927f},
        //           },
        //           {
        ////{-0.01375741f,0.01165698f,0.04275635f},
        //{-0.004103001f,0.02275901f,-0.0223202f},
        //               {0.03289011f,0.01926422f,-0.01823749f},
        ////{0.03104839f,0.01964354f,0.002603507f},
        //{0.02381468f,0.02042166f,0.01128628f},
        //           },
        //           {
        ////{-0.01276815f,0.0006415636f,0.03982359f},
        //{-0.003602829f,0.002532134f,-0.0227518f},
        //               {0.03723032f,0.007077682f,-0.01750452f},
        ////{0.03445605f,0.00930607f,0.006924681f},
        //{0.0263062f,0.009477687f,0.01641548f},
        //           },
        //           {
        ////{-0.01068332f,-0.01011876f,0.03866962f},
        //{-0.002440354f,-0.01698995f,-0.01711446f},
        //               {0.03533715f,-0.01128588f,-0.01272103f},
        ////{0.03366577f,-0.003872055f,0.01006241f},
        //{0.02599939f,-0.001560491f,0.0195688f},
        //           },
        //           {
        ////{-0.004842782f,-0.02101037f,0.04096061f},
        //{0.0005680016f,-0.03463171f,-0.009540937f},
        //               {0.03007229f,-0.02585725f,-0.009156709f},
        ////{0.02953541f,-0.01806449f,0.005912331f},
        //{0.02305296f,-0.01517868f,0.01496171f},
        //           },
        //       };

        //_handRightPos = Input.Hand(Handed.Right);
        //_handLeftPos = Input.Hand(Handed.Left);

        //UI.HandleBegin("LeftTapeHandle", ref leftTapePose, model.Bounds);
        //model.Draw(Matrix.Identity);
        //UI.HandleEnd();

        //UI.HandleBegin("RightTapeHandle", ref rightTapePose, model.Bounds);
        //model.Draw(Matrix.Identity);
        //UI.HandleEnd();

        //Lines.Add(leftTapePose.position, rightTapePose.position, Color.HSV(1, 1, 1), 0.002f);

        //Text.Add(Vec3.Distance(leftTapePose.position * 1f, rightTapePose.position * 1f).ToString("n2"), 
        //    Matrix.TR(V.XYZ((leftTapePose.position.x + rightTapePose.position.x) / 2f, ((leftTapePose.position.y + rightTapePose.position.y) / 2f) + 0.02f, (leftTapePose.position.z + rightTapePose.position.z) / 2f), Quat.LookAt(leftTapePose.position + rightTapePose.position, Input.Head.position)));

        //palm = new Pose(_handLeftPos.palm.position, _handLeftPos.palm.orientation * Quat.FromAngles(90, 0, -90));

        //if (_handLeftPos.pinchActivation > 0.3f)
        //{
        //    currentPose = input_pose_pinch;
        //}
        //else if (_handLeftPos.gripActivation > 0.3f)
        //{
        //    currentPose = input_pose_point;
        //}
        //else if (_handLeftPos.pinchActivation > 0.3f & _handLeftPos.gripActivation > 0.3f)
        //{
        //    currentPose = input_pose_fist;
        //}
        //else
        //{
        //    currentPose = input_pose_neutral;
        //}

        //Hierarchy.Push(palm.ToMatrix());
        //for (int i = 0; i < currentPose.GetLength(0); i++)
        //{
        //    for (int y = 0; y < currentPose.GetLength(1) - 1; y++)
        //    {
        //        for (int z = 0; z < 1; z++)
        //        {
        //            Lines.Add(Hierarchy.ToLocal(_handLeftPos.wrist.position), V.XYZ(currentPose[i, 0, 0], currentPose[i, 0, 1], currentPose[i, 0, 2]), Color32.White, new Color32(255, 255, 255, 0), 0.0025f);
        //            Lines.Add(V.XYZ(currentPose[i, y, z], currentPose[i, y, z + 1], currentPose[i, y, z + 2]), V.XYZ(currentPose[i, y + 1, z], currentPose[i, y + 1, z + 1], currentPose[i, y + 1, z + 2]), Color32.White, new Color32(255, 255, 255, 0), 0.0025f);
        //        }
        //    }
        //}
        //Hierarchy.Pop();
    };
}
